%% script start
% some information:
% due to the long simulation time and the fast movement of the hydrogen
% atoms in the water molecules, the trajectories of these molecules will
% reach across the whole water part of the lipid model. Therefore it won't
% be usefull to determine the location dependency here.
% Additionally, the angles theta and phi are both set to 0°, because there
% is much more variation in location dependent correlation functions than
% in angle dependent correlation function. Additionally the angle
% dependency in lipid water is small compared to solid lipid, why the
% angles won't have  a too high influence.
% Furthermore, a look on the NN dependency will be made with different
% cases for nearest neighbours.

logMessage(sprintf('Starting the external script: %s.m', mfilename) ...
    ,logFilePath,true);
logMessage('Clearing varibles that wont be overwritten',logFilePath,false);


%% simulation specific information

lags = round(configuration.fractionForLags*timeSteps);
logMessage(sprintf(['The lag is set to %d time steps, which ' ...
    'is equivalent to %.2f %%. This configuration only shortens the '...
    'correlation functions and NOT the simulation time.'],lags ...
    ,(configuration.fractionForLags)*100),logFilePath,false);

nearestNeighbourCases = getNearestNeighbourCases(configuration ...
    ,numberOfHs,logFilePath);
nearestNeighbourCasesCount = size(nearestNeighbourCases,2);

[fibreAnglesTheta,fibreAnglesThetaCount,fibreAnglesPhi ...
    ,fibreAnglesPhiCount] = getThetaAndPhiFromConfiguration( ...
    configuration,logFilePath);

%% Preallocation

logMessage('Preallocation of arrays.',logFilePath,true);

meanPositions = single([mean(trajectoryX,2) mean(trajectoryY,2) ...
        mean(trajectoryZ,2)]);
    
atomCounter = 1;
calculatedAtomIndices = zeros(1,atomsToCalculate);
calculationSteps = fibreAnglesThetaCount*fibreAnglesPhiCount;

load('matFiles\randomSequenceOfAtoms.mat');
randomSequenceOfAtoms(1:15)

nearestNeighboursIDs = zeros(1,max(nearestNeighbourCases));
nearestNeighbourDistancesPow3 = zeros(max(nearestNeighbourCases) ...
    ,timeSteps,'single');

rotatedX = zeros(max(nearestNeighbourCases),timeSteps,'single');
rotatedY = zeros(max(nearestNeighbourCases),timeSteps,'single');
rotatedZ = zeros(max(nearestNeighbourCases),timeSteps,'single');

% THINK AGAIN: first transform to spherical harmonics and then rotate by
% add the thetas and phis. Calculate the commutators to determine wether
% this is possible or not.
polarAngle = zeros(max(nearestNeighbourCases),timeSteps,'single');
azimuthAngle = zeros(max(nearestNeighbourCases),timeSteps,'single');

sphericalHarmonicZerothOrder = zeros(max(nearestNeighbourCases) ...
    ,timeSteps,'like',single(1j));
sphericalHarmonicFirstOrder = zeros(max(nearestNeighbourCases) ...
    ,timeSteps,'like',single(1j));
sphericalHarmonicSecondOrder = zeros(max(nearestNeighbourCases) ...
    ,timeSteps,'like',single(1j));

for nearestNeighbours = nearestNeighbourCases
    key = sprintf('nearestNeighbours%g',nearestNeighbours);
    
    r1Estimation_theta_phi_atomCounter.(key) = zeros( ...
        fibreAnglesThetaCount,fibreAnglesPhiCount,atomsToCalculate);
    r1Estimation_theta_phi.(key) = zeros( ...
        fibreAnglesThetaCount,fibreAnglesPhiCount);
    
    correlationFunctionsZerothOrder.(key) = zeros(1,lags);
    correlationFunctionsFirstOrder.(key) = zeros(1,lags);
    correlationFunctionsSecondOrder.(key) = zeros(1,lags);

    sumCorrelationFunctionsSaverZerothOrder.(key) = zeros( ...
        fibreAnglesThetaCount,fibreAnglesPhiCount,lags);
    sumCorrelationFunctionSaverFirstOrder.(key) = zeros( ...
        fibreAnglesThetaCount,fibreAnglesPhiCount,lags);
    sumCorrelationFunctionSaverSecondOrder.(key) = zeros( ...
        fibreAnglesThetaCount,fibreAnglesPhiCount,lags);
end

atomTimer = zeros(1,atomsToCalculate);
%% Start simulation
printBreakLineToLogFile(logFilePath);
logMessage('Start simulation.',logFilePath,true);
for atomNumber = randomSequenceOfAtoms(atomCounter:atomsToCalculate)
    atomTimerStart = tic;
    logMessage(sprintf('Selected atom number %i',atomNumber),logFilePath ...
        ,false);
    calculatedAtomIndices(atomCounter) = atomNumber;
    
    % this seems to be a bit faster than writing the relative coordinates
    % to another variable and additionally saves RAM
    [trajectoryX,trajectoryY,trajectoryZ] = calculateRelativePositions( ...
        trajectoryX,trajectoryY,trajectoryZ,atomNumber);
    
    [nearestNeighboursIDs,nearestNeighbourDistancesPow3] =  ...
        findNearestNeighboursIDs(max(nearestNeighbourCases),trajectoryX ...
        ,trajectoryY,trajectoryZ);
    thetaNullCalculated = false;
    for phiNumber = 1:fibreAnglesPhiCount
        phi = fibreAnglesPhi(phiNumber);
        zAxis = [0 0 1];
        rotationMatrixPhi = get3DRotationMatrix(phi,zAxis);
        for thetaNumber = 1:fibreAnglesThetaCount 
            theta = fibreAnglesTheta(thetaNumber);
            if ~thetaNullCalculated || theta > 0
                yAxis = [0 1 0];
                rotationMatrixTheta = get3DRotationMatrix(theta,yAxis);
                totalRotationMatrix = ...
                    rotationMatrixTheta*rotationMatrixPhi;
                [rotatedX,rotatedY,rotatedZ]  ...
                    = rotateTrajectoriesWithRotationMatrix( ...
                    totalRotationMatrix,trajectoryX(nearestNeighboursIDs,:) ...
                    ,trajectoryY(nearestNeighboursIDs,:) ...
                    ,trajectoryZ(nearestNeighboursIDs,:));
                
                [polarAngle,azimuthAngle] = ...
                    transformToSphericalCoordinates(rotatedX,rotatedY ...
                    ,rotatedZ);
                
                [sphericalHarmonicZerothOrder,sphericalHarmonicFirstOrder ...
                    ,sphericalHarmonicSecondOrder] ...
                    = calculateSphericalHarmonics(polarAngle,azimuthAngle ...
                    ,nearestNeighbourDistancesPow3);
                
                correlationFunctionsZerothOrder ...
                    = calculateCorrelationFunctionForDifferentNNCases( ...
                    sphericalHarmonicZerothOrder,lags ...
                    ,nearestNeighbourCases);
                sumCorrelationFunctionsSaverZerothOrder ...
                    = addTwoCorrelationFunctionStructs( ...
                    sumCorrelationFunctionsSaverZerothOrder ...
                    ,correlationFunctionsZerothOrder,thetaNumber ...
                    ,phiNumber);
                
                correlationFunctionsFirstOrder ...
                    = calculateCorrelationFunctionForDifferentNNCases( ...
                    sphericalHarmonicFirstOrder,lags ...
                    ,nearestNeighbourCases);
                sumCorrelationFunctionSaverFirstOrder ...
                    = addTwoCorrelationFunctionStructs( ...
                    sumCorrelationFunctionSaverFirstOrder ...
                    ,correlationFunctionsFirstOrder,thetaNumber ...
                    ,phiNumber);
                
                correlationFunctionsSecondOrder ...
                    = calculateCorrelationFunctionForDifferentNNCases( ...
                    sphericalHarmonicSecondOrder,lags ...
                    ,nearestNeighbourCases);
                sumCorrelationFunctionSaverSecondOrder ...
                    = addTwoCorrelationFunctionStructs( ...
                    sumCorrelationFunctionSaverSecondOrder ...
                    ,correlationFunctionsSecondOrder,thetaNumber ...
                    ,phiNumber);
                
                
                for fieldName = string(fieldnames( ...
                        correlationFunctionsFirstOrder))'
                    correlationFunctionFirstOrder = ...
                        correlationFunctionsFirstOrder.(fieldName);
                    correlationFunctionSecondOrder = ...
                        correlationFunctionsSecondOrder.(fieldName);
                    [spectralDensityFirstOrder ...
                        ,spectralDensitySecondOrder] = ...
                        calculateSpectralDensities( ...
                        correlationFunctionFirstOrder ...
                        ,correlationFunctionSecondOrder,omega0 ...
                        ,deltaTInS,lags);
                    
                    r1Estimation_theta_phi_atomCounter.(fieldName) ...
                        (thetaNumber,phiNumber,atomCounter) = ...
                        calculateR1WithSpectralDensity( ...
                        spectralDensityFirstOrder ...
                        ,spectralDensitySecondOrder,dipolDipolConstant);
                    
                    [averageSpectralDensityFirstOrder ...
                        ,averageSpectralDensitySecondOrder] ...
                        = calculateSpectralDensities( ...
                        squeeze(sumCorrelationFunctionSaverFirstOrder...
                        .(fieldName)(thetaNumber,phiNumber,:))' ...
                        /atomCounter,squeeze( ...
                        sumCorrelationFunctionSaverSecondOrder ...
                        .(fieldName)(thetaNumber,phiNumber,:))' ...
                        /atomCounter,omega0,deltaTInS,lags);
                    
                    r1Estimation_theta_phi.(fieldName)( ...
                        thetaNumber,phiNumber) ...
                        = calculateR1WithSpectralDensity( ...
                        averageSpectralDensityFirstOrder ...
                        ,averageSpectralDensitySecondOrder ...
                        ,dipolDipolConstant);
                    
                    logMessage(sprintf(['=> %s, theta: %.2f, phi: %.2f\n' ...
                        '    Estimated relaxation rate for atom: %.4f\n'...
                        '    Estimated relaxation rate for calculated atoms:' ...
                        ' %.4f\n'],fieldName,rad2deg(theta),rad2deg(phi) ...
                        ,r1Estimation_theta_phi_atomCounter.(fieldName)( ...
                        thetaNumber,phiNumber,atomCounter) ...
                        ,r1Estimation_theta_phi.(fieldName)(thetaNumber ...
                        ,phiNumber)),logFilePath,false);
                end
                thetaNullCalculated = true;
            else
                for fieldName = string(fieldnames( ...
                        correlationFunctionsFirstOrder))'
                    sumCorrelationFunctionsSaverZerothOrder.(fieldName)( ...
                        thetaNumber,phiNumber,:)  ...
                        = sumCorrelationFunctionsSaverZerothOrder ...
                        .(fieldName)(1,1,:);
                    sumCorrelationFunctionSaverFirstOrder.(fieldName)( ...
                        thetaNumber,phiNumber,:) ...
                        = sumCorrelationFunctionSaverFirstOrder ...
                        .(fieldName)(1,1,:);
                    sumCorrelationFunctionSaverSecondOrder.(fieldName)( ...
                        thetaNumber,phiNumber,:) ...
                        = sumCorrelationFunctionSaverSecondOrder ...
                        .(fieldName)(1,1,:);
                    r1Estimation_theta_phi_atomCounter.(fieldName)( ...
                        thetaNumber,phiNumber,atomCounter) = ...
                        r1Estimation_theta_phi_atomCounter ...
                        .(fieldName)(1,1,atomCounter);
                    r1Estimation_theta_phi.(fieldName)( ...
                        thetaNumber,phiNumber) = r1Estimation_theta_phi ...
                        .(fieldName)(1,1);
                    logMessage(sprintf(['R1(theta=0,phi=%.2f) is used from theta = 0' ...
                        ' and phi = 0, because R1 is the same for different phi at' ...
                        ' theta = 0'],rad2deg(phi)),logFilePath,false);
                    logMessage(sprintf(['=> theta: %s, %.2f, phi: %.2f\n' ...
                        '    Estimated relaxation rate for atom: %.4f\n'...
                        '    Estimated relaxation rate for calculated atoms:' ...
                        ' %.4f\n'],fieldName,rad2deg(theta),rad2deg(phi) ...
                        ,r1Estimation_theta_phi_atomCounter.(fieldName)( ...
                        thetaNumber,phiNumber,atomCounter) ...
                        ,r1Estimation_theta_phi.(fieldName)(thetaNumber ...
                        ,phiNumber)),logFilePath,false);
                end
            end
        end
    end
    printDottedBreakLineToLogFile(logFilePath);
    if mod(atomCounter,configuration.savingIntervall) == 0
        lastSavingDate = datestr(now,'yyyymmdd_HHMM');
        createDataSavingObject();
        save(resultsFileSavingPath,'-struct','dataSavingObject','-v7.3');
        logMessage('Saved data',logFilePath);
    end
    logMessage(sprintf('Calculated %i atom(s)',atomCounter),logFilePath ...
        ,false);
    atomTimer(atomCounter) = toc(atomTimerStart);
    averageTimeForOneAtom = seconds(mean(atomTimer(1:atomCounter)));
    logMessage(sprintf([' ---> Average time for one atom: %s \n' ...
        '        Average time for one phi/theta: %s \n'...
        '        Approximately ready on: %s.'] ...
        ,datestr(averageTimeForOneAtom,'HH:MM:SS') ...
        ,datestr(averageTimeForOneAtom/calculationSteps,'HH:MM:SS') ...
        ,datetime('now')+averageTimeForOneAtom ...
        *(atomsToCalculate-atomCounter)),logFilePath,false);
    printEqualSignBreakLineToLogFile(logFilePath);
    atomCounter = atomCounter + 1;
end

