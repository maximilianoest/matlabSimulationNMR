function [fibreAnglesTheta,fibreAnglesThetaCount ...
    ,fibreAnglesPhi,fibreAnglesPhiCount] = ...
    getThetaAndPhiFromConfiguration(configuration,logFilePath)
 
% [fibreAnglesTheta,fibreAnglesThetaCount,fibreAnglesPhi ...
%     ,fibreAnglesPhiCount] = getThetaAndPhiFromConfiguration( ...
%     configuration,logFilePath)
% 
% This function returns the sorted angles theta and phi that are considered
% in the simulation. Addtionally, the angles are written into the logfile

fibreAnglesTheta = sort(deg2rad(getValuesFromStringEnumeration( ...
    configuration.fibreAnglesTheta,';','numeric')));
fibreAnglesThetaCount = size(fibreAnglesTheta,2);
logMessage(['Found the orientation(s):' sprintf(' %.f',rad2deg( ...
    fibreAnglesTheta))],logFilePath,false);
if min(fibreAnglesTheta) < 0
    error('orientationDependency:getThatAndPhiFromConfiguration:Theta' ...
        ,'Negative angles for theta are not possible, yet');
end

fibreAnglesPhi = sort(deg2rad(getValuesFromStringEnumeration( ...
    configuration.fibreAnglesPhi,';','numeric')));
fibreAnglesPhiCount = size(fibreAnglesPhi,2);
logMessage(['Found the position(s):' sprintf(' %.f',rad2deg( ...
    fibreAnglesPhi))],logFilePath,false);
if min(fibreAnglesPhi) < 0
    error('orientationDependency:getThatAndPhiFromConfiguration:Phi' ...
        ,'Negative angles for phi are not possible, yet');
end

logMessage(sprintf('That makes an overall of %d calculation steps' ...
    ,fibreAnglesThetaCount*fibreAnglesPhiCount),logFilePath,false);

end
